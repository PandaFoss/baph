#!/bin/bash

# simple package installs

typeset -a APKGS=() PPKGS=()
typeset -r BLD="$HOME/.cache/aur_builds"
typeset -r AUR='https://aur.archlinux.org'
typeset -r AURC="$AUR/cgit/aur.git/snapshot"
typeset -g NOVIEW='' NOCONF='' AURONLY='' CACHE=1
typeset -A DESC=([s]='search' [u]='update' [i]='installp')
typeset -A OPTS=([s]='RUN=search' [u]='RUN=update' [i]='RUN=installp' [n]='NOVIEW=--noview' [N]='NOCONF=--noconfirm' [a]='AURONLY=--auronly')

use()
{ # show the standard UNIX style help message..
	if [[ $1 == '-v' ]]; then
		cat << EOF
 baph v0.6
EOF
else
	cat <<EOF

 baph - Simple helper to search, install, and update AUR packages

 usage: baph <operation> [options] [package(s)]

 operations:
	 baph {-h --help}
	 baph {-v --version}
	 baph {-s --search}  <query(s)>
	 baph {-u --update}  [options] [package(s)]
	 baph {-i --install} [options] <package(s)>

 options:
	 --noview, -n       Skip viewing PKGBUILD files
	 --auronly, -a      Only operate on AUR packages
	 --noconfirm, -N    Skip confirmation dialogs

 examples:
	 install 'google-chrome' and 'yay' from the AUR
		 baph -i google-chrome yay

	 search for AUR packages matching 'cmus'
		 baph -s cmus

	 update only the AUR packages on the system, skip view/confirm dialogs
		 baph -uanN

EOF
fi
exit 0
}

msg()
{ # print colour $1 :: then message $2 in bold, usage: msg "color" "text"
	if [[ $1 ]]; then
		printf "$1::\e[0m \e[1m$2\e[0m\n"
	else
		printf "$2\n"
	fi
}

die()
{ # print string $1 and exit with error code $2, usage: die "text" exitcode
	printf "\e[1;31merror:\e[0m\t%s\n" "$1" && exit "${2:-1}"
}

get()
{ # install an AUR package.. usage: get "package"
	pkg="$1"
	(( CACHE )) || [[ -d "$BLD/$pkg" ]] && rm -rf "${BLD:?}/$pkg"
	[[ -d "$BLD" ]] || mkdir -p "$BLD"

	if ! hash git >/dev/null 2>&1 || [[ ! -e $BLD/$pkg/PKGBUILD || $CACHE -eq 0 ]]; then
		msg '\e[34m' "Retrieving package: $pkg"
		[[ -d "$BLD/$pkg" ]] && rm -rf "${BLD:?}/$pkg"
		[[ -e "$BLD/$pkg.tar.gz" ]] && rm -rf "$BLD/$pkg.tar.gz"
		if cd "$BLD" && { curl -LO -m 15 "$AURC/$pkg.tar.gz" || git clone "$AUR/$pkg"; }; then
			if [[ -e "$BLD/$pkg.tar.gz" ]]; then
				tar -xvf "$pkg.tar.gz" || die "failed to extract package archive: $pkg.tar.gz"
				rm -rf "$BLD/$pkg.tar.gz"
			fi
		else
			die "failed to get package: $pkg"
		fi
	elif [[ -e "$BLD/$pkg/PKGBUILD" && -d "$BLD/$pkg/.git" ]]; then
		msg '\e[34m' "Synchronizing \e[32m$pkg\e[0m\e[1m cache..."
		{ cd "$BLD/$pkg" && git pull >/dev/null 2>&1; } || die "failed to update package repo: $AUR/$pkg"
	fi

	if [[ -r "$BLD/$pkg/PKGBUILD" ]] && cd "$BLD/$pkg"; then
		view "$BLD/$pkg/PKGBUILD" || yesno "Continue building $pkg" || { (( CACHE )) || rm -rf "${BLD:?}/$pkg"; return 1;}
		buildp "$BLD/$pkg/PKGBUILD" || return 1
	else
		die "$BLD/$pkg does not contain a PKGBUILD or it is not readable"
	fi

	return 0
}

view()
{ # view PKGBUILD.. usage: view "/path/to/PKGBUILD"
	if [[ -z $NOVIEW ]] && yesno "View/Edit the PKGBUILD for $pkg"; then
		${EDITOR:-vi} "$1"
		return 1
	fi
	return 0
}

keys()
{ # import PGP keys from package.. usage: keys ${KEYS[@]}
	for key in "$@"; do
		if ! pacman-key --list-keys | grep -q "$key"; then
			msg '\e[33m' "Resolving missing pgp key for $pkg: $key"
			if ! gpg --receive-keys "$key" && sudo pacman-key -r "$key" && sudo pacman-key --lsign-key "$key"; then
				msg '\e[33m' "Failed to import pgp key, continuing anyway"
			fi
		fi
	done
}

deps()
{ # build package depends.. usage: deps ${DEPENDS[@]}
	while (( $# > 0 )); do
		dep="$(sed 's/[=<>]=\?[0-9.\-]*.*//g' <<< "$1")"
		shift
		if ! { pacman -Qsq "^$dep$" || pacman -Ssq "^$dep$"; } >/dev/null 2>&1; then
			msg '\e[33m' "Resolving \e[32m$pkg\e[0m\e[1m AUR dependency: $dep"
			get "$dep" || die "failed to build dependency $dep"
		fi
	done
	cd "$BLD/$pkg" || die "failed to cd $BLD/$pkg"
}

yesno()
{ # ask confirmation if NOCONF is not set, usage: yesno "question"
	if [[ $NOCONF ]]; then
		return 0
	else
		read -re -p $'\e[34m::\e[0m \e[1m'"$1"$'? [Y/n]\e[0m ' c
	fi
	[[ -z $c || $c == 'y' || $c == 'Y' ]]
}

query()
{ # return key value $1 from json/dict $2, usage: query "key" "input"
	awk -F'","' -v k="$1" '{
	for (i=1; i <= NF; i++) { if ($i ~ k) print $i }
	}' <<< "$2" | sed 's/.*'"$1"'":"\?\(.*\),\?"\?.*/\1/g; s/[,"]$//g; s/[\\%]//g; s/null,".*$/null/'
}

buildp()
{ # build package.. usage: buildp "/path/to/PKGBUILD"
	typeset -i i o # in or out of array
	typeset -a depends makedepends validpgpkeys # arrays
	typeset t=""

	while read -r l; do
		[[ $l =~ ^[\ \	]*# ]] && continue # skip comments
		case "$l" in
			depends=*|makedepends=*|validpgpkeys=*) i=1; [[ $l == *')'* ]] && o=1 ;;
			*')'*) (( i )) && o=1 ;;
		esac
		(( i )) && { [[ $t ]] && t+=$'\n'"$l" || t="$l"; }
		(( o )) && o=0 i=0
	done < "$1"

	eval "$t" # better than `eval PKGBUILD` but still sub-optimal

	(( ${#validpgpkeys[@]} > 0 )) && keys "${validpgpkeys[@]}"
	(( ${#depends[@]} || ${#makedepends[@]} )) && deps "${depends[@]}" "${makedepends[@]}"

	makepkg -sicr && { rm -rf ./*.tar.xz >/dev/null 2>&1 || return 0; }
}

search()
{ # search query the AUR, usage: search "query"
	for q in "$@"; do
		msg '\e[34m' "Searching the AUR for '$q'..."
		typeset res=$(curl -Lsm 10 "$AUR"'/rpc.php?type=search&arg='"$q")
		if [[ -z $res || $res == *'"resultcount":0'* ]]; then
			printf "\e[1;31m:: \e[0mno results found\n"
		else
			typeset -i j=1
			typeset -a pkgs=()
			while read -r i; do
				n=$(query "Name" "$i")
				v=$(query "Version" "$i")
				d=$(query "Description" "$i")
				(( ${#d} > ${COLUMNS:-$(tput cols)} )) && d=$(sed 's/\([\.,]\)/\1\\n   /' <<< "$d")
				[[ $(query "OutOfDate" "$i") != null ]] && v+="\e[1;31m  (Out of Date!)"
				printf "\e[1;33m%s\e[1;35m AUR/\e[1;37m%s \e[1;32m$v\n\e[0m    $d\n" "$j" "$n"
				(( j++ ))
				pkgs+=("${n//[()]/}")
			done < <(sed 's/},{/\n/g' <<< "$res")
			if (( j > 1 )) && read -re -p $'\n\nEnter package number(s) to install: ' id && [[ $id =~ [0-9] ]]; then
				for num in $id; do
					case $num in
						''|*[!0-9]*) : ;;
						*) APKGS+=("${pkgs[$((num - 1))]}") ;;
					esac
				done
				(( ${#APKGS[@]} == 0 )) || installp
			fi
		fi
	done
}

update()
{ # check updates for each package, usage: update
	if (( ${#APKGS[@]} == 0 )); then
		while read -r l; do APKGS+=("$l"); done < <(pacman -Qqm 2>/dev/null)
		[[ $AURONLY ]] || sudo pacman -Syyu $NOCONF
	fi

	if (( ${#APKGS[@]} > 0 )); then
		msg '\e[34m' "Synchronizing AUR package versions..."
		typeset -a up=()
		typeset i="" n="" o="" q="${APKGS[*]}"
		( curl -L# "$AUR/packages/{${q// /,}}" | awk '/Details:/ {sub(/<\/h.?>/,""); print $4}' >/tmp/.aur_pkgver ) &
		( pacman -Q "${APKGS[@]}" | awk '{print $2}' >/tmp/.pac_pkgver ) &
		wait
		while read -r line; do n+=("$line"); done < /tmp/.aur_pkgver
		while read -r line; do o+=("$line"); done < /tmp/.pac_pkgver
		for ((i=0; i < ${#APKGS[@]}; i++)); do
			if [[ ${n[$i]} && ${o[$i]} && $(vercmp "${o[$i]}" "${n[$i]}") -gt 0 ]]; then
				up+=("${APKGS[$i]}")
				printf " %s \e[1m\e[31m%s \e[33m->\e[32m %s\e[0m\n" "${APKGS[$i]}" "${n[$i]}" "${o[$i]}"
			fi
		done
		msg '\e[34m' "Starting AUR package upgrade..."
		if (( ${#up[@]} > 0 )); then
			printf "\n\e[1mPackages (%s)\e[0m %s\n\n" "${#up[@]}" "${up[*]}"
			yesno "Proceed with package upgrade" && for i in "${up[@]}"; do get "$i"; done
		else
			msg '' " there is nothing to do"
		fi
	else
		msg '\e[34m' "No AUR packages installed.."
	fi
	exit 0
}

installp()
{ # loop over package array and install each.. usage: installp
	typeset v=""
	typeset -gx pkg

	if (( ${#APKGS[@]} == 0 && ${#PPKGS[@]} == 0 )); then
		die "no targets specified"
	else
		(( ${#AURONLY} == 0 && ${#PPKGS[@]} > 0 )) && { sudo pacman -S "${PPKGS[@]}" $NOCONF || exit 1; }
		for i in "${APKGS[@]}"; do
			v="$(curl -sLI -m 10 "$AUR/packages/$i" | awk 'NR==1 {print $2}')"
			(( v == 200 )) || die "$v response from $AUR/packages/$i"$'\n\ncheck the package name is spelled correctly'
			get "$i" || msg '\e[33m' "Exited $i build early"
		done
	fi
}

trap 'echo; exit' SIGINT # catch ^C

if (( ! UID )); then
	die "do not run baph as root"
elif (( ! $# )); then
	die "no operation specified (use -h for help)"
elif ! hash sudo pacman curl >/dev/null 2>&1; then
	die "this requires to following packages: sudo pacman curl\n\n\toptional packages: git"
else
	RUN='' ARGS=''
	for i in "$@"; do # shift long opts to short form
		case "$i" in
			--version|--help|--search|--install|--update|--noview|--auronly|--noconfirm)
				[[ $i == '--noconfirm' ]] && i="${i^^}"
				[[ $ARGS == *"${i:2:1}"* ]] || ARGS+="${i:1:2}" ;;
			--*) die "invalid option: '$i'" ;;
			-*) [[ $ARGS == *"${i:1:1}"* ]] || ARGS+="$i " ;;
			*) [[ $ARGS == *"$i"* ]] || ARGS+="$i " ;;
		esac
	done
	eval set -- "$ARGS"
	while getopts ":hvuisanN" OPT; do
		case "$OPT" in
			h|v) use "-$OPT" ;;
			n|N|a|s|u|i)
				[[ $OPT =~ (s|u|i) && $RUN ]] && die "${DESC[$OPT]} and $RUN cannot be used together"
				eval "${OPTS[$OPT]}" ;;
			\?) die "invalid option: '$OPTARG'" ;;
		esac
	done
	shift $((OPTIND - 1))
	if [[ $RUN == 'search' ]]; then
		(( $# > 0 )) || die "search requires a query"
		$RUN "$@"
	else
		for i in "$@"; do
			pacman -Ssq "^$i$" >/dev/null 2>&1 && PPKGS+=("$i") || APKGS+=("$i")
		done
		$RUN
	fi
fi

# vim:fdm=marker:fmr={,}
